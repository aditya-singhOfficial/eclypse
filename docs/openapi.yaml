openapi: 3.0.3
info:
  title: MERN E-Commerce API
  version: 1.0.0
  description: |
    Full-featured e-commerce backend with users, products, categories, carts, orders, and reviews.
servers:
  - url: https://eclypse-vyeb.onrender.com
    description: Production
  - url: http://localhost:3000
    description: Local development

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          $ref: '#/components/schemas/Category'
        images:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
              public_id:
                type: string
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CartItem:
      type: object
      properties:
        _id:
          type: string
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
    Cart:
      type: object
      properties:
        user:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        items:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: '#/components/schemas/Product'
              quantity:
                type: integer
              price:
                type: number
        totalPrice:
          type: number
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        paymentInfo:
          type: object
        isDelivered:
          type: boolean
          default: false
        deliveredAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Review:
      type: object
      properties:
        _id:
          type: string
        product:
          type: string
        user:
          $ref: '#/components/schemas/User'
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

security:
  - bearerAuth: []

paths:  # AUTH ROUTES
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Bad request
  
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login existing user (both admin and regular users)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /api/auth/admin/me:
    get:
      tags:
        - Admin Authentication
      summary: Check admin authentication and get admin details
      description: Verifies the admin's token and returns user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
  # USER ROUTES
  /api/users:
    get:
      tags:
        - Admin User Management
      summary: Get all users (admin only)
      description: Retrieves a list of all users for admin management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
  
  /api/users/{userId}:
    get:
      tags:
        - Admin User Management
      summary: Get user by ID (admin only)
      description: Retrieves details for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found
    
    put:
      tags:
        - Admin User Management
      summary: Update user (admin only)
      description: Updates details for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [user, admin]
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found
    
    delete:
      tags:
        - Admin User Management
      summary: Delete user (admin only)
      description: Deletes a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found

  /api/users/{userId}/assign-admin:
    put:
      tags:
        - Admin User Management
      summary: Assign admin role to user
      description: Assigns admin privileges to a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin role assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found

  /api/users/{userId}/revoke-admin:
    put:
      tags:
        - Admin User Management
      summary: Revoke admin role from user
      description: Revokes admin privileges from a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin role revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found

  # CATEGORY ROUTES
  /api/categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    
    post:
      tags:
        - Categories
      summary: Create a new category (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Electronics"
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    
    put:
      tags:
        - Categories
      summary: Update category (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Home Electronics"
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Category not found
    
    delete:
      tags:
        - Categories
      summary: Delete category (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Category deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Category not found
  # PRODUCT ROUTES
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products (public)
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category ID
        - name: limit
          in: query
          schema:
            type: integer
          description: Limit the number of results
        - name: page
          in: query
          schema:
            type: integer
          description: Page number for pagination
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
    
    post:
      tags:
        - Admin Product Management
      summary: Create a new product (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - category
              properties:
                name:
                  type: string
                  example: "Smartphone X"
                description:
                  type: string
                  example: "Latest smartphone with advanced features"
                price:
                  type: number
                  example: 999.99
                category:
                  type: string
                  example: "64abc1234fed56789"
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                      public_id:
                        type: string
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/products/admin:
    get:
      tags:
        - Admin Product Management
      summary: Get all products (admin view)
      description: Retrieves all products with admin-specific details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of products (admin view)
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    
    put:
      tags:
        - Admin Product Management
      summary: Update product (admin only)
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                      public_id:
                        type: string
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Product not found
    
    delete:
      tags:
        - Admin Product Management
      summary: Delete product (admin only)
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product deleted successfully"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Product not found

  # CART ROUTES
  /api/cart:
    get:
      tags:
        - Cart
      summary: Get user's cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
    
    post:
      tags:
        - Cart
      summary: Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  example: "64def4567abc12345"
                quantity:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
        '404':
          description: Product not found

  /api/cart/{itemId}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  example: 2
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
        '404':
          description: Cart item not found
    
    delete:
      tags:
        - Cart
      summary: Remove item from cart
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
        '404':
          description: Cart item not found

  # ORDER ROUTES
  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
    
    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paymentInfo
              properties:
                paymentInfo:
                  type: object
                  example: {
                    "id": "pi_123456789",
                    "status": "paid"
                  }
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /api/orders/my:
    get:
      tags:
        - Orders
      summary: Get current user's order history
      description: Retrieves all orders placed by the authenticated user, sorted by most recent first
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's order history with populated product details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized

  /api/orders/my/{id}:
    get:
      tags:
        - Orders
      summary: Get a specific order from user's order history
      description: Retrieves a specific order by ID that belongs to the authenticated user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The order ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order details with populated product information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found or doesn't belong to the user

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found
    
    put:
      tags:
        - Orders
      summary: Update order status (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Order not found

  # REVIEW ROUTES
  /api/products/{id}/reviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews for a product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Product not found
    
    post:
      tags:
        - Reviews
      summary: Create a new review for a product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 4
                comment:
                  type: string
                  example: "Great product, very satisfied!"
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Product not found

  /api/products/{productId}/reviews/{reviewId}:
    put:
      tags:
        - Reviews
      summary: Update a review
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not the owner of the review
        '404':
          description: Review not found
    
    delete:
      tags:
        - Reviews
      summary: Delete a review
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Review deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Not the owner of the review or not an admin
        '404':
          description: Review not found

  # ADMIN ROUTES
  /api/auth/admin/me:
    get:
      tags:
        - Admin Authentication
      summary: Get admin user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin user details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/admin/stats:
    get:
      tags:
        - Admin Analytics
      summary: Get comprehensive dashboard statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  totalProducts:
                    type: integer
                  totalOrders:
                    type: integer
                  totalRevenue:
                    type: number
                  pendingOrders:
                    type: integer
                  completedOrders:
                    type: integer
                  cancelledOrders:
                    type: integer
                  recentOrders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  recentUsers:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  topProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          $ref: '#/components/schemas/Product'
                        orderCount:
                          type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/admin/stats/total-sales:
    get:
      tags:
        - Admin Analytics
      summary: Get total sales data with date filtering
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Start date for sales data (YYYY-MM-DD)
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: End date for sales data (YYYY-MM-DD)
      responses:
        '200':
          description: Sales data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalSales:
                    type: number
                  totalOrders:
                    type: integer
                  averageOrderValue:
                    type: number
                  salesByDate:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                        sales:
                          type: number
                        orders:
                          type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/users/{userId}/assign-admin:
    put:
      tags:
        - Admin User Management
      summary: Assign admin role to a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID to assign admin role
      responses:
        '200':
          description: Admin role assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found

  /api/users/{userId}/revoke-admin:
    put:
      tags:
        - Admin User Management
      summary: Revoke admin role from a user
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID to revoke admin role
      responses:
        '200':
          description: Admin role revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: User not found

  /api/orders/admin/all:
    get:
      tags:
        - Admin Order Management
      summary: Get all orders for admin view
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of orders per page
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
          description: Filter by order status
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      pages:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /api/orders/{orderId}/status:
    put:
      tags:
        - Admin Order Management
      summary: Update order status
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Order ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Order not found

  /api/orders/{orderId}/deliver:
    put:
      tags:
        - Admin Order Management
      summary: Mark order as delivered
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Order ID to mark as delivered
      responses:
        '200':
          description: Order marked as delivered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Order cannot be marked as delivered
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
        '404':
          description: Order not found
